name: frondtend-cd
on:
  push:
    branches:
      - main
  pull_request:
 
jobs:
  Lint_Job:
    runs-on: ubuntu-latest
    defaults:  
     run:
      shell: bash
      working-directory: ./starter/frontend

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Use Node.js 
        uses: actions/setup-node@v4
        with:
         node-version: latest
        
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
         path: ~/.npm
         key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
             
      - name: Install dependencies
        run:  npm ci

      - name: Run Lint 
        run: npm run lint
 
  TEST_JOB: 
    runs-on: ubuntu-latest
    defaults:  
     run:
      shell: bash
      working-directory: ./starter/frontend
    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

    - name: Use Node.js 
      uses: actions/setup-node@v4
      with:
         node-version: latest
        
    - name: Cache dependencies
      id: cache
      uses: actions/cache@v3
      with:
         path: ~/.npm
         key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
             
    - name: Install dependencies
      run:  npm ci

    - name: Run Lint 
      run: npm run test

  BUILD_JOB: 
    runs-on: ubuntu-latest
    needs: [Lint_Job, TEST_JOB]
    defaults:  
     run:
      shell: bash
      working-directory: ./starter/frontend
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: list
      run: |
          pwd
          ls -lrth

    - name: Login to ECR
      id: ecr
      uses: elgohr/ecr-login-action@v3
      with:
        access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region: ${{ secrets.AWS_DEFAULT_REGION }}
            

    - name: Build, tag, and push docker image to Amazon ECR Public
      id: build-publish
      shell: bash
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG: frontend
          
      run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --build-arg=REACT_APP_MOVIE_API_URL=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
